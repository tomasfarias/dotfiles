# -*- mode: org; coding: utf-8; -*-
#+ TITLE: My Emacs configuration
#+ AUTHOR: Tomás Farías Santana

* General settings
Enable syntax-highlighting for all buffers.
#+BEGIN_SRC emacs-lisp :results output silent
  (global-font-lock-mode t)
#+END_SRC

Clean up Emacs by disabling modes that I don't use all the time.
#+BEGIN_SRC emacs-lisp :results output silent
  (when (functionp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (functionp 'set-scroll-bar-mode)
    (set-scroll-bar-mode 'nil))
  (when (functionp 'mouse-wheel-mode)
    (mouse-wheel-mode -1))
  (when (functionp 'tooltip-mode)
    (tooltip-mode -1))
  (when (functionp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (functionp 'blink-cursor-mode)
    (blink-cursor-mode -1))
  (setq inhibit-startup-message t
        initial-major-mode 'fundamental-mode)
#+END_SRC

Ensure UTF-8 everywhere.
#+BEGIN_SRC emacs-lisp :results output silent
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+END_SRC

Backup files in system's temp directory instead of default.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

Shorter yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Define auth-sources. These are used to login to IRC and RSS feeds.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

Automatically revert buffers for changed files.
#+BEGIN_SRC emacs-lisp :results output silent
  (global-auto-revert-mode 1)
#+END_SRC

** Environment variables
Ensure environment variables (like ~PATH~) are loaded from SHELL:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package exec-path-from-shell)

  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE"))
    (add-to-list 'exec-path-from-shell-variables var))

  (when (memq window-system '(mac ns x pgtk))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))

  (setq-default explicit-shell-file-name "/bin/zsh")
#+END_SRC

* Aesthetics
** Theme
I manage my Emacs theme with ~doom-themes~. Although I'm currently in love with Gruvbox, I like to swap things around from time to time, and ~doom-themes~ bundles up a lot of great themes for me to try.
#+BEGIN_SRC emacs-lisp :results output silent :results output silent
  (use-package solaire-mode
    ;; Darkens "support" buffers (those not opening a file) to help distinguish them
    :config (solaire-global-mode +1))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t
          doom-gruvbox-brighter-comments t
          doom-gruvbox-dark-variant "hard")
    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** Doom-modeline
A beautiful modeline.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :config (setq doom-modeline-height 40)
    (setq doom-modeline-hud nil)
    (setq doom-modeline-window-width-limit 100)
    (setq all-the-icons-scale-factor 1.0)
    (setq all-the-icons-default-adjust 0.0)
    (setq doom-modeline-icon t)
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** Fonts
[[https://github.com/be5invis/Iosevka][Iosevka]] is my current font of choice. I set up both fixed and variable pitch, although at the time of writing I'm not using variable pitch.
#+BEGIN_SRC emacs-lisp :results output silent
  (defun tomas/setup-font-faces ()
    (setq-default line-spacing 1)
    (set-face-attribute 'default nil :font (font-spec :family "Iosevka Fixed SS18" :size 18 :weight 'medium :style 'extended))
    (set-face-attribute 'fixed-pitch nil :font (font-spec :family "Iosevka Fixed SS18" :size 18 :weight 'medium :style 'extended))
    (set-face-attribute 'variable-pitch nil :font (font-spec :family "Iosevka Aile" :size 18 :weight 'medium))

    (set-face-attribute 'mode-line nil :font (font-spec :family "Iosevka Fixed SS18" :weight 'bold :size 18 :height 0.8 :style 'extended))
    (set-face-attribute 'mode-line-active nil :font (font-spec :family "Iosevka Fixed SS18" :weight 'bold :size 18 :height 0.8 :style 'extended))
    (set-face-attribute 'mode-line-inactive nil :font (font-spec :family "Iosevka Fixed SS18" :weight 'normal :size 18 :height 0.8 :style 'extended))
    )

  (add-hook 'after-init-hook 'tomas/setup-font-faces)
  (add-hook 'server-after-make-frame-hook 'tomas/setup-font-faces)
#+END_SRC

** Miscellaneous settings
*** Line and column numbers
#+BEGIN_SRC emacs-lisp :results output silent
  (line-number-mode 1)
  (column-number-mode 1)
  (global-display-line-numbers-mode)
#+END_SRC

*** Hide pointer
#+BEGIN_SRC emacs-lisp :results output silent
  (setq make-pointer-invisible t)
#+END_SRC

*** Scrolling
#+BEGIN_SRC emacs-lisp :results output silent
    (pixel-scroll-precision-mode 1)
    (pixel-scroll-mode 1)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
          mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
          mouse-wheel-follow-mouse 't ;; scroll window under mouse
          scroll-step 0
          scroll-conservatively 1000) ;; keyboard scroll one line at a time
#+END_SRC

*** Transparency
This requires native Wayland compilation (Emacs >= 29).
#+BEGIN_SRC emacs-lisp :results output silent
  (set-frame-parameter (selected-frame) 'alpha-background 90) ; For current frame
  (add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+END_SRC

*** Indent
I do most of my work with Python so, by default, do not indent with tabs.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default indent-tabs-mode nil)
#+END_SRC

** EMACS Dashboard:
I also ensure ~recentf-mode~ is enabled as the Dashboard includes recent files.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dashboard
    :config (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Trust the process."
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-set-init-info t
          dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo
          dashboard-projects-backend 'projectile
          dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 10)
                            (registers . 5))))
  (recentf-mode 1)
          #+END_SRC

* Productivity modes
** Browser
I use plain EWW with a function to toggle images as navigating sites with images is clunky.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package sly
    :straight (:host github :repo "joaotavora/sly" :branch "master")
    :config (setq inferior-lisp-program "sbcl"))

  (use-package shrface
    :config
    (shrface-basic)
    (shrface-trial)
    (shrface-default-keybindings) ; setup default keybindings
    (setq shrface-href-versatile t))

  (use-package eww
    :init
    (add-hook 'eww-after-render-hook #'shrface-mode))

  (setq browse-url-browser-function 'eww-browse-url)

  (defun tomas/eww-toggle-images ()
    "Toggle whether images are loaded and reload the current page."
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload t)
    (message "Images are now %s"
             (if shr-inhibit-images "off" "on")))

  (define-key eww-mode-map (kbd "I") #'tomas/eww-toggle-images)
  (define-key eww-link-keymap (kbd "I") #'tomas/eww-toggle-images)

  ;; Minimal rendering by default
  (setq-default shr-inhibit-images t)   ; toggle with `I`

  (defun eww-tag-pre (dom)
    (let ((shr-folding-mode 'none)
          (shr-current-font 'default))
      (shr-ensure-newline)
      (insert (eww-fontify-pre dom))
      (shr-ensure-newline)))

  (defun eww-fontify-pre (dom)
    (with-temp-buffer
      (shr-generic dom)
      (let ((mode (eww-buffer-auto-detect-mode)))
        (when mode
          (eww-fontify-buffer mode)))
      (buffer-string)))

  (defun eww-fontify-buffer (mode)
    (delay-mode-hooks (funcall mode))
    (font-lock-default-function mode)
    (font-lock-default-fontify-region (point-min)
                                      (point-max)
                                      nil))

  (defun eww-buffer-auto-detect-mode ()
    (let* ((map '((ada ada-mode)
                  (awk awk-mode)
                  (c c-mode)
                  (cpp c++-mode)
                  (clojure clojure-mode lisp-mode)
                  (csharp csharp-mode java-mode)
                  (css css-mode)
                  (dart dart-mode)
                  (delphi delphi-mode)
                  (emacslisp emacs-lisp-mode)
                  (erlang erlang-mode)
                  (fortran fortran-mode)
                  (fsharp fsharp-mode)
                  (go go-mode)
                  (groovy groovy-mode)
                  (haskell haskell-mode)
                  (html html-mode)
                  (java java-mode)
                  (javascript javascript-mode)
                  (json json-mode javascript-mode)
                  (latex latex-mode)
                  (lisp lisp-mode)
                  (lua lua-mode)
                  (matlab matlab-mode octave-mode)
                  (objc objc-mode c-mode)
                  (perl perl-mode)
                  (php php-mode)
                  (prolog prolog-mode)
                  (python python-mode)
                  (r r-mode)
                  (ruby ruby-mode)
                  (rust rustic-mode)
                  (scala scala-mode)
                  (shell shell-script-mode)
                  (smalltalk smalltalk-mode)
                  (sql sql-mode)
                  (swift swift-mode)
                  (visualbasic visual-basic-mode)
                  (xml sgml-mode)))
           (language (language-detection-string
                      (buffer-substring-no-properties (point-min) (point-max))))
           (modes (cdr (assoc language map)))
           (mode (cl-loop for mode in modes
                          when (fboundp mode)
                          return mode)))
      (message (format "%s" language))
      (when (fboundp mode)
        mode)))

  (setq shr-external-rendering-functions
        '((pre . eww-tag-pre)))
#+END_SRC

** Windows
Ace window allows me to visually change windows as an alternative to ~C-x o~:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ace-window
    :config (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC

** Git interaction
I use Magit to interact with git in Emacs.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :config (global-set-key (kbd "C-c g") 'magit-file-dispatch))

  (use-package pinentry
    :config
    (setf epg-pinentry-mode 'loopback)
    (pinentry-start))
#+END_SRC

** Project management
Projectile manages my projects.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :diminish projectile-mode
    :init (setq projectile-keymap-prefix (kbd "C-c p"))
    :config (projectile-global-mode))
#+END_SRC

** Treemacs
Treemacs mode for file and project exploring. Personally, treemacs should come bundled with Emacs.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package treemacs
    :config
    (progn
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind (:map global-map
                ("<f8>" . treemacs)
                ("C-c t t" . treemacs)
                ("C-c t c" . treemacs-collapse-project)
                ("C-c t s" . treemacs-switch-workspace)
                ("C-c t r" . treemacs-remove-workspace)
                ("C-c t m" . treemacs-rename-workspace)
                ("C-c t w r" . treemacs-remove-project-from-workspace)
                ("C-c t w a" . treemacs-add-project-to-workspace)
                ("C-c t a" . treemacs-add-project-to-workspace)))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :after (treemacs)
    :config (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode))
#+END_SRC

** Undo and redo
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package undo-tree
    :config (global-undo-tree-mode 1)
    (global-set-key (kbd "C-z") 'undo)
    (defalias 'redo 'undo-tree-redo)
    (global-set-key (kbd "C-S-z") 'redo)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/.cache"))))
#+END_SRC

** Ivy
Ivy includes swiper, counsel, and ivy itself. These replace some standard commands as global bindings are set.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ivy
    :config
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-c c f") 'counsel-describe-function)
    (global-set-key (kbd "C-c c v") 'counsel-describe-variable)
    (global-set-key (kbd "C-c c o") 'counsel-describe-symbol)
    (global-set-key (kbd "C-c c l") 'counsel-find-library)
    (global-set-key (kbd "C-c c i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "C-c c u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c c j") 'counsel-set-variable)
    )

  (use-package swiper
    :after ivy
    :config (global-set-key (kbd "C-s") 'swiper-isearch))

  (ivy-mode 1)
#+END_SRC

** Documentation management
Explore [[https://www.kapeli.com/dash][Dash]] docsets in Emacs with [[https://github.com/dash-docs-el/dash-docs][dash-docs]] offline. Inspired by [[https://hynek.me/articles/productive-fruit-fly-programmer/][Hynek's blogpost]].
#+BEGIN_SRC emacs-lisp :results output silent
  (defun go-doc()
    (interactive)
    (setq-local dash-docs-docsets '("Go")))

  (defun rust-doc()
    (interactive)
    (setq-local dash-docs-docsets '("Rust")))

  (defun python-doc()
    (interactive)
    (setq-local dash-docs-docsets '("Python 3")))

  (defun emacs-lisp-doc()
    (interactive)
    (setq-local dash-docs-docsets '("Emacs Lisp")))

  (use-package dash-docs
    :config (add-hook 'go-mode-hook 'go-doc)
    (add-hook 'go-ts-mode-hook 'go-doc)
    (add-hook 'python-mode-hook 'python-doc)
    (add-hook 'python-ts-mode-hook 'python-doc)
    (add-hook 'rustic-mode-hook 'rust-doc)
    (add-hook 'rustic-ts-mode-hook 'rust-doc)
    (add-hook 'emacs-lisp-mode-hook 'emacs-lisp-doc)
    (setq dash-docs-docsets-path (expand-file-name "~/.docsets"))
    (setq dash-docs-browser-func 'eww))

  (use-package counsel-dash
    :config (add-hook 'emacs-lisp-mode-hook (lambda () (setq-local counsel-dash-docsets '("Emacs Lisp"))))
    (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python 3"))))
    (add-hook 'python-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python 3"))))
    (add-hook 'go-mode-hook (lambda () (setq-local counsel-dash-docsets '("Go"))))
    (add-hook 'go-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Go"))))
    (add-hook 'rustic-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
    (add-hook 'rustic-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
    (setq counsel-dash-docsets-path (expand-file-name "~/.docset"))
    (setq counsel-dash-docsets-url "https://raw.github.com/Kapeli/feeds/master")
    (setq counsel-dash-min-length 3)
    (setq counsel-dash-candidate-format "%d %n (%t)")
    (setq counsel-dash-enable-debugging nil)
    (setq counsel-dash-common-docsets '("Python 3" "Rust"))
    (setq counsel-dash-browser-func 'browse-url)
    (setq counsel-dash-ignored-docsets nil)
    (global-set-key (kbd "C-c c d") 'counsel-dash))
#+END_SRC

** Whitespace management
Mostly for deleting trailing whitespace
#+BEGIN_SRC emacs-lisp :results output silent
  (global-set-key (kbd "C-c w w") 'whitespace-mode)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Rainbows
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-delimiters)
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package multiple-cursors
    :config (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

** RSS
In an effort to move everything to Emacs, I'm switching from an RSS reader in my browser to [[https://github.com/skeeto/elfeed][Elfeed]].
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elfeed
    :straight t
    :config (add-hook 'elfeed-new-entry-hook
                      (elfeed-make-tagger :before "2 weeks ago"
                                          :remove 'unread)))
  (defun tomas/elfeed ()
    "Start elfeed after setting elfeed-feeds."
    (interactive)
    (let* ((host "https://github.com/tomasfarias.private.atom")
           ;; Fetches token from auth-sources and constructs feed URL.
           (github-feed (format "%s?%s" host (funcall (plist-get (car (auth-source-search :host host)) :secret)))))
      (setq elfeed-feeds
            ;; We use backquote syntax to evaluate github-feed.
            `(("https://news.ycombinator.com/rss" news)
              (,github-feed monitoring)
              ("https://hynek.me/index.xml" blog dev)
              ("https://third-bit.com/atom.xml" blog dev)
              ("http://threesixty360.wordpress.com/feed/" blog math))))
    (elfeed))

  (global-set-key (kbd "C-c r d") 'tomas/elfeed)
#+END_SRC

* Everything org
** Initial setup
Set base definitions: org directories, default org files, and custom functions.
#+BEGIN_SRC emacs-lisp :results output silent
  (defconst org-directory "~/src/github.com/tomasfarias/org/"
    "org-mode directory and repo, where most of the org-mode file lives")
  (defconst org-projects-dir (expand-file-name "projects" org-directory)
    "Project-specific tasks directory.")
  (defconst org-notes-dir (expand-file-name "notes" org-directory)
    "Directory of shareable, technical notes.")
  (defconst org-journal-dir (expand-file-name "journal" org-directory)
    "Directory of journal notes.")
  (defconst org-inbox-file (expand-file-name "Inbox.org" org-directory)
    "New stuff collected in this file.")
  (defconst org-work-inbox-file (expand-file-name "WorkInbox.org" org-directory)
    "New work-related stuff collected in this file.")
  (defconst org-babel-library-file (expand-file-name "org_library_of_babel.org" org-notes-dir)
    "Org babel library.")

  (defun agenda-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

              PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun agenda-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (defun line-spacing-hook ()
    (setq line-spacing 2))
#+END_SRC

** Org
The org mode itself.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org
    :init
    (setq org-use-speed-commands t
          org-use-sub-superscripts "{}"
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-completion-use-ido t
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-fontify-done-headline t
          org-pretty-entities t
          org-startup-indented t
          org-src-tabs-acts-natively t
          org-log-done 'time
          org-log-into-drawer t
          org-agenda-files (directory-files-recursively "~/src/github.com/tomasfarias/org" "\\.org$")
          org-agenda-span 10
          org-agenda-start-on-weekday 1
          org-agenda-include-diary t
          org-agenda-window-setup 'reorganize-frame
          org-agenda-skip-scheduled-if-done nil
          org-agenda-compact-blocks t
          org-agenda-sticky t
          org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo ""
                       ((org-agenda-skip-function '(or (agenda-skip-subtree-if-habit)
                                                       (agenda-skip-subtree-if-priority ?A)
                                                       (org-agenda-skip-if nil '(scheduled deadline))))
                        (org-agenda-overriding-header "ALL normal priority tasks:"))))
             ((org-agenda-compact-blocks t))))
          org-super-agenda-header-separator ""
          org-todo-keywords
          (quote ((sequence "TODO(t)" "IN-PROGRESS(p)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)")))
          )

    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

    :bind (("C-c o l" . org-store-link)
           ("C-c o r r" . org-refile)
           ("C-c o a a" . org-agenda)
           ("C-c o s" . org-sort)
           ("C-c o c" . org-capture)
           ("C-M-|" . indent-rigidly))
    :config
    (add-hook 'org-mode-hook 'line-spacing-hook)
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'line-spacing-hook)
    (add-hook 'org-mode-hook 'flyspell-mode))

  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
   )
  (setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

** Additional org packages
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-preview-html)

  (use-package org-fragtog
    :config (add-hook 'org-mode-hook 'org-fragtog-mode))

  (use-package org-superstar
    :config (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (emacs-lisp :results output silent . t)
     (latex . t)
     (python . t)
     (shell . t)))

  (use-package org-super-agenda
    :config (org-super-agenda-mode))

  (use-package org-journal
    :commands (org-journal-new-entry org-capture)
    :after (org-capture)
    :bind (("C-c o j" . org-journal-new-entry))
    :custom
    (org-journal-dir org-journal-dir)
    (org-journal-date-format "%A, %d %B %Y")
    (org-journal-enable-agenda-integration t))

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (plist-put org-format-latex-options :scale 1.75)

  (use-package org-drill
    :bind (("C-c o d" . org-drill))
    :config
    (setq org-drill-hide-item-headings-p t
          org-drill-maximum-duration 30
          org-drill-maximum-items-per-session nil
          org-drill-add-random-noise-to-intervals-p t
          org-drill-adjust-intervals-for-early-and-late-repetitions-p t))

  (defun tomas/org-drill-tag (tag)
    "Start org-drill with a user chosen question tag."
    (interactive "Input the tag to drill: ")
    (custom-set-variables
     '(org-drill-question-tag tag))
    (org-drill)
    (custom-set-variables
     '(org-drill-question-tag "drill")))
#+END_SRC

** Templates
#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-capture-templates
        '(("i" "Inbox" entry (file org-inbox-file)
           "* TODO %?
            SCHEDULED: %t
            DEADLINE: %t")
          ("w" "Work inbox" entry (file org-work-inbox-file)
           "* TODO %?
            SCHEDULED: %t
            DEADLINE: %t")
          ("j" "Journal" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
           :jump-to-captured t
           :immediate-finish t)))
#+END_SRC

** Org-roam
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-roam
    :init (setq org-roam-v2-ack t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today)
           ("C-c n C-t" . org-roam-tag-add)
           ("C-c n C-S-t" . org-roam-tag-remove))
    :config (setq org-roam-directory org-directory)
    (org-roam-db-autosync-mode)
    (setq org-roam-db-location (concat org-roam-directory "org-roam.db")
          org-roam-completion-everywhere t
          org-roam-capture-templates '(("l" "Literature note")
                                       ("lb" "Book" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("lc" "Course" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author-or-editor}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("la" "Article" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("lp" "Paper" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("p" "Permanent note" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+FILETAGS:\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t))
          time-stamp-start "#\\+lastmod: [\t]*"))

  (use-package org-roam-ui
    :after org-roam
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

** Bibliography and references
#+BEGIN_SRC emacs-lisp :results output silent
  (setq bibtex-completion-bibliography (list (concat org-directory "bibliography/references.bib"))
        bibtex-completion-library-path (concat org-directory "bibliography/pdfs/")
        bibtex-completion-notes-path (concat org-directory "notes")
        org-bibtex-file (list (concat org-directory "bibliography/references.bib"))
        bibtex-completion-notes-template-multiple-files ":PROPERTIES:\n:ID: ${id}\n:Custom_ID: ${=key=}\n:AUTHOR: ${author-or-editor}\n:ROAM_REFS: ${citekey}\n:BTYPE: \n:YEAR: ${year}\n:END:\n#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+DATE: %U\n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n")

  (setq bibtex-completion-display-formats
        '((article       . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${journal:40}")
          (inbook        . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*}")
          (incollection  . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (t             . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*}")))

  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))

  (use-package org-ref
    :after org-roam)

  (use-package org-roam-bibtex
    :straight t
    :after (org-roam ivy-bibtex)
    :config (require 'org-ref) (require 'org-ref-ivy)
    (setq orb-preformat-templates t
          orb-preformat-keywords
          '("=key=" "title" "url" "doi" "author-or-editor" "keywords" "year" "citekey" "fullcite")
          org-roam-bibtex-preformat-keywords
          '("=key=" "title" "url" "doi" "author-or-editor" "keywords" "year" "citekey" "fullcite")))

  (add-hook 'bibtex-mode-hook 'flyspell-mode)
  (setq bibtex-user-optional-fields '(("keywords" "Keywords to describe the entry" "")
                                      ("file" "Link to document file." ":"))
        bibtex-align-at-equal-sign t)

  (use-package ivy-bibtex
    :config
    (setq ivy-re-builders-alist '((ivy-bibtex . ivy--regex-ignore-order)
                                  (t . ivy--regex-plus))
          bibtex-completion-bibliography (concat org-directory "bibliography/references.bib")
          bibtex-completion-pdf-field "File"
          bibtex-completion-notes-path (concat org-directory "notes")
          bibtex-completion-additional-search-fields '(keywords))
    :bind
    (("C-c n B" . ivy-bibtex)))

  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-ivy
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

  (use-package citar
    :straight t
    :after org-roam
    :custom
    (org-cite-global-bibliography (concat org-directory "bibliography/references.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    (bibtex-set-dialect citar--insert-bibtex)
    (setq citar-symbols
          `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
            (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
            (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
    (setq citar-symbol-separator "  ")
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c n b" . #'org-cite-insert)))

  (org-roam-bibtex-mode)
#+END_SRC

** Deft
Used to navigate org files.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package deft
    :after org
    :bind
    ("C-c d d" . deft)
    :config
    (setq deft-recursive t)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-default-extension 'org)
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filename-as-title t)
    (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")

    (setq deft-directory org-notes-dir))
#+END_SRC

* IRC with ERC
Set nickname, real-name, setup SASL, and define a function to connect to [[irc.libera.chat]]:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package erc
    :config
    (setopt
     erc-sasl-mechanism 'plain
     erc-sasl-auth-source-function #'erc-sasl-auth-source-password-as-host)
    (setq
     erc-nick "tomasfarias"
     erc-prompt-for-password nil
     erc-server-auto-reconnect t
     erc-server-reconnect-timeout 15
     erc-autojoin-channels-alist '(("Libera.Chat" "#emacs" "#python" "##rust" "#archlinux" "#archlinux-offtopic" "#reddit-sysadmin" "#linux" "#networking" "#security"))))

  (defun tomas/erc-libera-start ()
    "Initialize Libera.Chat connection with auth-source credentials."
    (interactive)
    (erc-tls
     :server "irc.libera.chat"
     :port 6697
     :nick "tomasfarias"
     :user "tomasfarias"
     :password "irc.libera.chat"
     :full-name "Tomás Farías"))
#+END_SRC

* Language modes
** Tree-sitter
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package treesit-auto
    :demand t
    :straight (treesit-auto
               :type git
               :host github
               :repo "renzmann/treesit-auto")
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))

  (use-package combobulate
    :straight (combobulate
               :type git
               :host github
               :repo "mickeynp/combobulate")
    :hook ((python-ts-mode . combobulate-mode)
           (js-ts-mode . combobulate-mode)
           (css-ts-mode . combobulate-mode)
           (yaml-ts-mode . combobulate-mode)
           (typescript-ts-mode . combobulate-mode)
           (rust-ts-mode . combobulate-mode)
           (go-ts-mode . combobulate-mode)
           (tsx-ts-mode . combobulate-mode)))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.pyenv/versions")
    (pyvenv-tracking-mode 1))
#+END_SRC

** Terraform
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package terraform-mode)
#+END_SRC

** Dockerfile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

** Groovy
Boy do I love Jenkins.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package groovy-mode
    :config (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . groovy-mode))
    (add-to-list 'auto-mode-alist '("\\.jenkinsfile\\'" . groovy-mode))
    (setq groovy-indent-offset 2))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package markdown-mode
    :mode ("\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  (use-package poly-markdown
    :config (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode)
    ("\\.yaml\\'" . yaml-mode))
#+END_SRC

** LSP
Language server protocol for auto-completion with company-mode.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1)
    (setf (alist-get 'isort apheleia-formatters)
          '("isort" "--stdout" "-"))
    (setf (alist-get 'python-mode apheleia-mode-alist)
          '(isort black))
    (setf (alist-get 'python-ts-mode apheleia-mode-alist)
          '(isort black))
    )

  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-selection-wrap-around t
          company-show-numbers 1)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "M-<") 'company-select-first)
    (define-key company-active-map (kbd "M->") 'company-select-last))

  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
           (python-ts-mode . lsp)
           (rust-ts-mode . lsp)
           (typescript-mode . lsp)
           (typescript-ts-mode . lsp)
           (go-mode . lsp)
           (go-ts-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :config (setq
             lsp-ui-sideline-show-diagnostics nil
             lsp-ui-sideline-show-hover nil
             lsp-ui-sideline-show-code-actions nil
             lsp-ui-doc-enable t
             lsp-ui-doc-show-with-cursor nil
             lsp-ui-doc-delay 1)
    :bind ("C-c h" . lsp-ui-doc-toggle)
    :commands lsp-ui-mode)

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)

  (use-package which-key
    :config (which-key-mode))

  (use-package lsp-pyright
    :ensure t
    :hook ((python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp)))
    (python-ts-mode . (lambda ()
                     (require 'lsp-pyright)
                     (lsp)))))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :init (global-flycheck-mode)
    :config (setq flycheck-flake8rc ".flake8")
    :after lsp-mode)

  (use-package flycheck-pycheckers
    :after flycheck
    :config (setq flycheck-pycheckers-checkers '(flake8 mypy3)))

  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))

  (use-package flycheck-rust)
  (push 'rustic-clippy flycheck-checkers)
  (setq rustic-flycheck-clippy-params "--message-format=json")

  (with-eval-after-load 'rustic-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package solidity-flycheck)
#+END_SRC

** Solidity
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package solidity-mode
    :config (setq solidity-comment-style 'slash))
#+END_SRC

** Go
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package go-mode)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rustic
    :config
    (setq
     rustic-lsp-client 'lsp-mode
     ;; Let apheleia take care of format.
     rustic-format-trigger 'nil))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))

  (setq typescript-ts-mode-indent-offset 4)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+END_SRC
