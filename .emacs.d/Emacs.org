# -*- mode: org; coding: utf-8; -*-
#+ TITLE: My Emacs configuration
#+ AUTHOR: Tomás Farías Santana

* General settings
Enable syntax-highlighting for all buffers:
#+BEGIN_SRC emacs-lisp :results output silent
  (global-font-lock-mode t)
#+END_SRC

Ensure environment variables (like PATH) are loaded from SHELL:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package exec-path-from-shell)

  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE"))
    (add-to-list 'exec-path-from-shell-variables var))

  (when (memq window-system '(mac ns x pgtk))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))

  (setq-default explicit-shell-file-name "/bin/zsh")
#+END_SRC

Disable many things:
#+BEGIN_SRC emacs-lisp :results output silent
  (when (functionp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (functionp 'set-scroll-bar-mode)
    (set-scroll-bar-mode 'nil))
  (when (functionp 'mouse-wheel-mode)
    (mouse-wheel-mode -1))
  (when (functionp 'tooltip-mode)
    (tooltip-mode -1))
  (when (functionp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (functionp 'blink-cursor-mode)
    (blink-cursor-mode -1))
  (setq inhibit-startup-message t
        initial-major-mode 'fundamental-mode)
#+END_SRC

Backup files in system's temp directory:
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

Shorter yes/no:
#+BEGIN_SRC emacs-lisp :results output silent
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Ensure UTF-8 everywhere:
#+BEGIN_SRC emacs-lisp :results output silent
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+END_SRC

* Aesthetics
Manage Emacs theme with ~doom-themes~:
#+BEGIN_SRC emacs-lisp :results output silent :results output silent
  (use-package solaire-mode
    ;; Darkens "support" buffers (those not opening a file) to help distinguish them
    :config (solaire-global-mode +1))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic nil) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

Although I'm currently in love with Gruvbox, I like to swap things around from time to time, and ~doom-themes~ bundles up a lot of great themes for me to try.

Doom-modeline:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-height 35))

  (custom-set-faces
   '(mode-line ((t (:family "MonoLisa"))))
   '(mode-line-active ((t (:family "MonoLisa" :weight bold :height 100))))
   '(mode-line-inactive ((t (:family "MonoLisa" :height 100)))))
#+END_SRC

Ensure line and column numbers:
#+BEGIN_SRC emacs-lisp :results output silent
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

Hide the mouse while typing:
#+BEGIN_SRC emacs-lisp :results output silent
  (setq make-pointer-invisible t)
#+END_SRC

Scrolling smoothly:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smooth-scrolling
    :init (smooth-scrolling-mode 1))
#+END_SRC

Transparency (requires native Wayland):
#+BEGIN_SRC emacs-lisp :results output silent
  (set-frame-parameter (selected-frame) 'alpha-background 90) ; For current frame
  (add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+END_SRC

By default, do not indent with tabs:
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default indent-tabs-mode nil)
#+END_SRC

Attempt to set fonts:
#+BEGIN_SRC emacs-lisp :results output silent
  (when (member "MonoLisa-Regular" (font-family-list))
    (set-frame-font "MonoLisa-Regular-13:Regular" t t))

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 120 :weight normal))))
   '(fixed-pitch ((t (:family "MonoLisa" :slant normal :weight normal :height 120 :width normal)))))

  (custom-theme-set-faces
   'user
   '(org-block                 ((t (:inherit fixed-pitch))))
   '(org-code                  ((t (:inherit fixed-pitch))))
   '(org-link                  ((t (:inherit variable-pitch :underline t))))
   '(org-table                 ((t (:inherit fixed-pitch))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-property-value        ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold))))
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))
#+END_SRC

Display line numbers everywhere:
#+BEGIN_SRC emacs-lisp :results output silent
  (global-display-line-numbers-mode)
#+END_SRC

Customize my EMACS Dashboard:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package page-break-lines)

  (use-package dashboard
    :config (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "Get to work!")
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))))
#+END_SRC

* Productivity modes
Lisp and browsing:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package sly
    :straight (:host github :repo "joaotavora/sly" :branch "master")
    :config (setq inferior-lisp-program "sbcl"))

  (setq browse-url-browser-function 'eww-browse-url)

  (require 'cl-lib)

  (defun eww-tag-pre (dom)
    (let ((shr-folding-mode 'none)
          (shr-current-font 'default))
      (shr-ensure-newline)
      (insert (eww-fontify-pre dom))
      (shr-ensure-newline)))

  (defun eww-fontify-pre (dom)
    (with-temp-buffer
      (shr-generic dom)
      (let ((mode (eww-buffer-auto-detect-mode)))
        (when mode
          (eww-fontify-buffer mode)))
      (buffer-string)))

  (defun eww-fontify-buffer (mode)
    (delay-mode-hooks (funcall mode))
    (font-lock-default-function mode)
    (font-lock-default-fontify-region (point-min)
                                      (point-max)
                                      nil))

  (defun eww-buffer-auto-detect-mode ()
    (let* ((map '((ada ada-mode)
                  (awk awk-mode)
                  (c c-mode)
                  (cpp c++-mode)
                  (clojure clojure-mode lisp-mode)
                  (csharp csharp-mode java-mode)
                  (css css-mode)
                  (dart dart-mode)
                  (delphi delphi-mode)
                  (emacslisp emacs-lisp-mode)
                  (erlang erlang-mode)
                  (fortran fortran-mode)
                  (fsharp fsharp-mode)
                  (go go-mode)
                  (groovy groovy-mode)
                  (haskell haskell-mode)
                  (html html-mode)
                  (java java-mode)
                  (javascript javascript-mode)
                  (json json-mode javascript-mode)
                  (latex latex-mode)
                  (lisp lisp-mode)
                  (lua lua-mode)
                  (matlab matlab-mode octave-mode)
                  (objc objc-mode c-mode)
                  (perl perl-mode)
                  (php php-mode)
                  (prolog prolog-mode)
                  (python python-mode)
                  (r r-mode)
                  (ruby ruby-mode)
                  (rust rust-mode)
                  (scala scala-mode)
                  (shell shell-script-mode)
                  (smalltalk smalltalk-mode)
                  (sql sql-mode)
                  (swift swift-mode)
                  (visualbasic visual-basic-mode)
                  (xml sgml-mode)))
           (language (language-detection-string
                      (buffer-substring-no-properties (point-min) (point-max))))
           (modes (cdr (assoc language map)))
           (mode (cl-loop for mode in modes
                          when (fboundp mode)
                          return mode)))
      (message (format "%s" language))
      (when (fboundp mode)
        mode)))

  (setq shr-external-rendering-functions
        '((pre . eww-tag-pre)))
#+END_SRC

Ace window allows me to visually change windows as an alternative to ~C-x o~ :
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ace-window
    :config (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC



Magit:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :config (global-set-key (kbd "C-c g") 'magit-file-dispatch))

  (use-package pinentry
    :config
    (setf epg-pinentry-mode 'loopback)
    (pinentry-start))
#+END_SRC

Projectile:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :diminish projectile-mode
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    :config
    (projectile-global-mode))
#+END_SRC

Treemacs mode for file and project exploring:
#+BEGIN_SRC emacs-lisp :results output silent
    (use-package treemacs
      :config
      (progn
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind (:map global-map
                  ("<f8>" . treemacs)
                  ("C-c t t" . treemacs)
                  ("C-c t c" . treemacs-collapse-project)
                  ("C-c t s" . treemacs-switch-workspace)
                  ("C-c t r" . treemacs-remove-workspace)
                  ("C-c t m" . treemacs-rename-workspace)
                  ("C-c t w r" . treemacs-remove-project-from-workspace)
                  ("C-c t w a" . treemacs-add-project-to-workspace)
                  ("C-c t a" . treemacs-add-project-to-workspace)))

    (use-package treemacs-magit
      :after (treemacs magit))

    (use-package treemacs-projectile
      :after (treemacs projectile))

    (use-package treemacs-icons-dired
      :after (treemacs)
      :config (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode))
#+END_SRC

Undo-tree with undo and redo bindings:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package undo-tree
    :config (global-undo-tree-mode 1)
    (global-set-key (kbd "C-z") 'undo)
    (defalias 'redo 'undo-tree-redo)
    (global-set-key (kbd "C-S-z") 'redo)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/.cache"))))
#+END_SRC

Ivy includes swiper, counsel, and ivy itself. These replace some standard commands as global bindings are set:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ivy
    :config
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-c c f") 'counsel-describe-function)
    (global-set-key (kbd "C-c c v") 'counsel-describe-variable)
    (global-set-key (kbd "C-c c o") 'counsel-describe-symbol)
    (global-set-key (kbd "C-c c l") 'counsel-find-library)
    (global-set-key (kbd "C-c c i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "C-c c u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c c j") 'counsel-set-variable)
    )

  (use-package swiper
    :after ivy
    :config (global-set-key (kbd "C-s") 'swiper-isearch))
#+END_SRC

Whitespace management:
#+BEGIN_SRC emacs-lisp :results output silent
  (global-set-key (kbd "C-c w w") 'whitespaceg-mode)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Rainbows:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-delimiters)
#+END_SRC

Multiple cursors:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package multiple-cursors
    :config (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

Snippet management:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :straight t
    :config
    (global-set-key (kbd "C-c y n") 'yas-new-snippet)
    (global-set-key (kbd "C-c y v") 'yas-visit-snippet-file)
    (setq yas-snippet-dirs
          '("~/src/github.com/tomasfarias/snippets"
            )))
  (yas-global-mode 1)
#+END_SRC

* Everything org
Set base org directory and default notes file:
#+BEGIN_SRC emacs-lisp :results output silent
  (defconst org-directory "~/src/github.com/tomasfarias/org/"
    "org-mode directory and repo, where most of the org-mode file lives")
  (defconst org-projects-dir (expand-file-name "projects" org-directory)
    "Project-specific tasks directory.")
  (defconst org-notes-dir (expand-file-name "notes" org-directory)
    "Directory of shareable, technical notes.")
  (defconst org-journal-dir (expand-file-name "journal" org-directory)
    "Directory of journal notes.")
  (defconst org-inbox-file (expand-file-name "Inbox.org" org-directory)
    "New stuff collected in this file.")
  (defconst org-work-inbox-file (expand-file-name "WorkInbox.org" org-directory)
    "New work-related stuff collected in this file.")
  (defconst org-babel-library-file (expand-file-name "org_library_of_babel.org" org-notes-dir)
    "Org babel library.")
#+END_SRC

The org itself:
#+BEGIN_SRC emacs-lisp :results output silent
  (defun agenda-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

        PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun agenda-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (use-package org
    :init
    (setq org-use-speed-commands t
          org-use-sub-superscripts "{}"
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-completion-use-ido t
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-fontify-done-headline t
          org-pretty-entities t
          org-startup-indented t
          org-src-tabs-acts-natively t
          org-log-done 'time
          org-log-into-drawer t
          org-agenda-files (quote ("~/src/github.com/tomasfarias/org"
                                   "~/src/github.com/tomasfarias/org/notes"))
          org-agenda-span 10
          org-agenda-start-on-weekday 1
          org-agenda-include-diary t
          org-agenda-window-setup 'reorganize-frame
          org-agenda-skip-scheduled-if-done nil
          org-agenda-compact-blocks t
          org-agenda-sticky t
          org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo ""
                       ((org-agenda-skip-function '(or (agenda-skip-subtree-if-habit)
                                                       (agenda-skip-subtree-if-priority ?A)
                                                       (org-agenda-skip-if nil '(scheduled deadline))))
                        (org-agenda-overriding-header "ALL normal priority tasks:"))))
             ((org-agenda-compact-blocks t))))
          org-super-agenda-header-separator ""
          org-todo-keywords
          (quote ((sequence "TODO(t)" "IN-PROGRESS(p)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)")))
          )

    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

    :bind (("C-c o l" . org-store-link)
           ("C-c o r r" . org-refile)
           ("C-c o a a" . org-agenda)
           ("C-c o s" . org-sort)
           ("C-c o c" . org-capture)
           ("C-M-|" . indent-rigidly))
    :config
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'variable-pitch-mode)
    (add-hook 'org-mode-hook 'flyspell-mode))

  (use-package org-preview-html)

  (use-package org-fragtog
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))

  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (emacs-lisp :results output silent . t)
     (latex . t)
     (python . t)
     (shell . t)))

  (use-package org-super-agenda
    :config (org-super-agenda-mode))

  (use-package org-journal
    :commands (org-journal-new-entry org-capture)
    :after (org-capture)
    :bind
    (("C-c o j" . org-journal-new-entry))
    :custom
    (org-journal-dir org-journal-dir)
    (org-journal-date-format "%A, %d %B %Y")
    (org-journal-enable-agenda-integration t))
#+END_SRC

Set-up org-capture templates:
#+BEGIN_SRC emacs-lisp :results output silent
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (setq org-capture-templates
        '(("i" "Inbox" entry (file org-inbox-file)
           "* TODO %?
            SCHEDULED: %t
            DEADLINE: %t")
          ("w" "Work inbox" entry (file org-work-inbox-file)
           "* TODO %?
            SCHEDULED: %t
            DEADLINE: %t")
          ("j" "Journal" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
           :jump-to-captured t
           :immediate-finish t)))
#+END_SRC

Install org-roam:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-roam
    :init (setq org-roam-v2-ack t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today)
           ("C-c n C-t" . org-roam-tag-add)
           ("C-c n C-S-t" . org-roam-tag-remove))
    :config (setq org-roam-directory org-directory)
    (org-roam-db-autosync-mode)
    (setq org-roam-db-location (concat org-roam-directory "org-roam.db")
          org-roam-completion-everywhere t
          org-roam-capture-templates '(("l" "Literature note")
                                       ("lb" "Book" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("lc" "Course" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author-or-editor}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("la" "Article" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("lp" "Paper" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t)
                                       ("p" "Permanent note" plain "%?"
                                        :if-new (file+head "notes/${slug}.org"
                                                           "#+TITLE: ${title}\n#+FILETAGS:\n#+CREATED: %u\n#+LASTMOD: \n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n\n"
                                                           )
                                        :unnarrowed t
                                        :immediate-finish t))
          time-stamp-start "#\\+lastmod: [\t]*"))

  (use-package org-roam-ui
    :after org-roam
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

Bibliography and references:
#+BEGIN_SRC emacs-lisp :results output silent
  (setq bibtex-completion-bibliography (list (concat org-directory "bibliography/references.bib"))
        bibtex-completion-library-path (concat org-directory "bibliography/pdfs/")
        bibtex-completion-notes-path (concat org-directory "notes")
        org-bibtex-file (list (concat org-directory "bibliography/references.bib"))
        bibtex-completion-notes-template-multiple-files ":PROPERTIES:\n:ID: ${id}\n:Custom_ID: ${=key=}\n:AUTHOR: ${author-or-editor}\n:ROAM_REFS: ${citekey}\n:BTYPE: \n:YEAR: ${year}\n:END:\n#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+FILETAGS: ${keywords}\n#+DATE: %U\n#+STARTUP: inlineimages\n#+STARTUP: latexpreview\n")

  (setq bibtex-completion-display-formats
        '((article       . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${journal:40}")
          (inbook        . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*}")
          (incollection  . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (t             . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${year:4} ${author:36} ${title:*}")))

  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))

  (use-package org-ref
    :after org-roam)

  (use-package org-roam-bibtex
    :straight t
    :after (org-roam ivy-bibtex)
    :config (require 'org-ref) (require 'org-ref-ivy)
    (setq orb-preformat-templates t
          orb-preformat-keywords
          '("=key=" "title" "url" "doi" "author-or-editor" "keywords" "year" "citekey" "fullcite")
          org-roam-bibtex-preformat-keywords
          '("=key=" "title" "url" "doi" "author-or-editor" "keywords" "year" "citekey" "fullcite")))

  (add-hook 'bibtex-mode-hook 'flyspell-mode)
  (setq bibtex-user-optional-fields '(("keywords" "Keywords to describe the entry" "")
                                      ("file" "Link to document file." ":"))
        bibtex-align-at-equal-sign t)

  (use-package ivy-bibtex
    :config
    (setq ivy-re-builders-alist '((ivy-bibtex . ivy--regex-ignore-order)
                                  (t . ivy--regex-plus))
          bibtex-completion-bibliography (concat org-directory "bibliography/references.bib")
          bibtex-completion-pdf-field "File"
          bibtex-completion-notes-path (concat org-directory "notes")
          bibtex-completion-additional-search-fields '(keywords))
    :bind
    (("C-c n B" . ivy-bibtex)))

  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-ivy
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

  (use-package citar
    :straight t
    :after org-roam
    :custom
    (org-cite-global-bibliography (concat org-directory "bibliography/references.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    (bibtex-set-dialect citar--insert-bibtex)
    (setq citar-symbols
          `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
            (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
            (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
    (setq citar-symbol-separator "  ")
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c n b" . #'org-cite-insert)))

  (org-roam-bibtex-mode)
#+END_SRC

Deft for org files:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package deft
    :after org
    :bind
    ("C-c d d" . deft)
    :config
    (setq deft-recursive t)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-default-extension 'org)
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filename-as-title t)
    (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")

    (setq deft-directory org-notes-dir))
#+END_SRC

* IRC with ERC
Set nickname, real-name, setup SASL, and define a function to connect to [[irc.libera.chat]]:
#+BEGIN_SRC emacs-lisp :results output silent
  (setq
   erc-nick "tomasfarias"
   erc-server-auto-reconnect t
   erc-server-reconnect-timeout 15)

  (defun erc-libera-start ()
    (interactive)
    (erc-tls
     :server "irc.libera.chat"
     :port 6697
     :nick "tomasfarias"
     :full-name "Tomás Farías")
    (erc
     :server "irc.libera.chat"
     :port 6667
     :nick "tomasfarias"
     :full-name "Tomás Farías"))
 #+END_SRC

* Language modes
 Python language mode settings:
 #+BEGIN_SRC emacs-lisp :results output silent
   (use-package pyvenv
     :ensure t
     :init
     (setenv "WORKON_HOME" "~/.pyenv/versions")
     (pyvenv-tracking-mode 1))

   (use-package py-isort
     :config (add-hook 'before-save-hook 'py-isort-before-save))

   (use-package blacken
     :hook (python-mode . blacken-mode)
     :config
     (setq blacken-only-if-project-is-blackened t))

   (add-hook 'python-mode-hook
             (lambda ()
               (setq-default tab-width 4)
               (add-to-list 'write-file-functions 'delete-trailing-whitespace)
               (setq whitespace-style '(face empty trailing indentation::space))))

   (add-hook 'python-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'python-mode-hook #'eglot-ensure)
#+END_SRC

Terraform language mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package terraform-mode)
#+END_SRC

Dockerfile mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

Groovy language mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package groovy-mode
    :config (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . groovy-mode))
    (add-to-list 'auto-mode-alist '("\\.jenkinsfile\\'" . groovy-mode))
    (setq groovy-indent-offset 2))
#+END_SRC

Markdown mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package markdown-mode
    :mode ("\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  (use-package poly-markdown
    :config (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)))
#+END_SRC

YAML mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode)
    ("\\.yaml\\'" . yaml-mode))
#+END_SRC

Language server protocol for auto-completion with company-mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 1)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (setq company-show-numbers 1)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "M-<") 'company-select-first)
    (define-key company-active-map (kbd "M->") 'company-select-last))

  (use-package eglot
    :config (define-key eglot-mode-map (kbd "C-c h") 'eldoc-box-eglot-help-at-point))

  (setq eldoc-echo-area-prefer-doc-buffer t)
  (setq eldoc-idle-delay 3)
  (setq eldoc-echo-area-use-multiline-p 5)

  (use-package eldoc-box)
  (add-to-list 'eglot-ignored-server-capabilites :hoverProvider)
#+END_SRC

Solidity language mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package solidity-mode
    :config (setq solidity-comment-style 'slash))
#+END_SRC

Go language mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package go-mode)
#+END_SRC

Rust language mode:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rustic
    :config (add-hook 'rustic-mode 'eglot-ensure)
    (setq
     ;; eglot seems to be the best option right now.
     rustic-lsp-client 'eglot
     rustic-format-trigger 'on-save
     ;; Prevent automatic syntax checking, which was causing lags and stutters.
     eglot-send-changes-idle-time (* 60 60)))
#+END_SRC

Syntax checking with flycheck:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :init (global-flycheck-mode)
    :config (setq flycheck-flake8rc ".flake8")
    :after eglot)

  (use-package flycheck-pycheckers
    :after flycheck
    :config (setq flycheck-pycheckers-checkers '(flake8 mypy3)))

  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))

  (use-package flycheck-rust)
  (push 'rustic-clippy flycheck-checkers)
  (setq rustic-flycheck-clippy-params "--message-format=json")

  (with-eval-after-load 'rustic-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package solidity-flycheck)
#+END_SRC
